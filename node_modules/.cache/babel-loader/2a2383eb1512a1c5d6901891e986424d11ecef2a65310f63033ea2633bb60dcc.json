{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if (selectedOption?.value == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    return option?.disabled ?? false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => options.get(itemValue)?.id, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange?.(event, newValues);\n    } else {\n      onChange?.(event, newValues[0] ?? null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange?.(event, newValue ?? null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange?.(fieldValue);\n      if (fieldValue === false && event?.type !== 'blur') {\n        buttonRef.current?.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => ({\n      highlightedValue: null,\n      selectedValues: defaultValue ?? [],\n      open: defaultOpen\n    }),\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      const optionRef = getOptionByValue(highlightedOption)?.ref;\n      if (!listboxRef.current || !optionRef?.current) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    externalEventHandlers?.onClick?.(event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (listboxRef.current?.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(selectValue) ?? null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    externalEventHandlers?.onChange?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","visuallyHidden","visuallyHiddenStyle","useButton","SelectActionTypes","ListActionTypes","useList","defaultOptionStringifier","useCompoundParent","extractEventHandlers","selectReducer","combineHooksSlotProps","defaultFormValueProvider","selectedOption","Array","isArray","length","JSON","stringify","map","o","value","useSelect","props","areOptionsEqual","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","name","required","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","getOptionAsString","getSerializedValue","valueProp","componentName","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","option","index","label","ref","createRef","id","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","from","keys","getOptionByValue","useCallback","valueToGet","similarValue","find","optionValue","get","isItemDisabled","valueToCheck","stringifyOption","controlledState","selectedValues","getItemId","itemValue","handleSelectionChange","event","newValues","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","current","focus","getItemDomElement","itemId","useListParameters","getInitialState","highlightedValue","controlledProps","focusManagement","itemComparer","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","isInitiallyOpen","optionRef","preventScroll","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","createHandleButtonClick","externalEventHandlers","onClick","defaultMuiPrevented","action","buttonClick","createHandleButtonKeyDown","otherHandlers","onKeyDown","key","preventDefault","keyDown","getButtonOwnRootProps","getSelectTriggerProps","role","getButtonProps","externalProps","combinedProps","createListboxHandleBlur","onBlur","contains","relatedTarget","getOwnListboxHandlers","getListboxProps","getCombinedRootProps","useDebugValue","selectValue","selectedOptionsMetadata","v","filter","createHandleHiddenInputChange","target","clearSelection","browserAutoFill","item","getHiddenInputProps","tabIndex","style"],"sources":["D:/WebPhotoApp/sandbox/node_modules/@mui/joy/node_modules/@mui/base/useSelect/useSelect.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect, visuallyHidden as visuallyHiddenStyle } from '@mui/utils';\nimport { useButton } from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport { ListActionTypes, useList } from '../useList';\nimport { defaultOptionStringifier } from './defaultOptionStringifier';\nimport { useCompoundParent } from '../useCompound';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { selectReducer } from './selectReducer';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if (selectedOption?.value == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    return option?.disabled ?? false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => options.get(itemValue)?.id, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange?.(event, newValues);\n    } else {\n      onChange?.(event, newValues[0] ?? null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange?.(event, newValue ?? null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange?.(fieldValue);\n      if (fieldValue === false && event?.type !== 'blur') {\n        buttonRef.current?.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    if (itemId == null) {\n      return null;\n    }\n    return subitems.get(itemId)?.ref.current ?? null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => ({\n      highlightedValue: null,\n      selectedValues: defaultValue ?? [],\n      open: defaultOpen\n    }),\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  useEnhancedEffect(() => {\n    if (open && highlightedOption !== null) {\n      const optionRef = getOptionByValue(highlightedOption)?.ref;\n      if (!listboxRef.current || !optionRef?.current) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    externalEventHandlers?.onClick?.(event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const combinedProps = combineHooksSlotProps(getSelectTriggerProps, getButtonRootProps);\n    return _extends({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (listboxRef.current?.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListboxRootProps);\n    return _extends({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    selectedOptionsMetadata = getOptionMetadata(selectValue) ?? null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    externalEventHandlers?.onChange?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: visuallyHiddenStyle\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport { useSelect };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}