{"ast":null,"code":"'use strict';\n\nconst currentMs = Date.now();\nconst startSeconds = Math.floor(currentMs / 1000);\nconst startNanoseconds = currentMs % 1000 * 1000 * 1000;\nconst oneSecond = 1000 * 1000 * 1000;\nlet nsCount = 0;\n\n/**\n * Get nano seconds\n *\n * @returns {Integer} The value of nano seconds\n */\nfunction nanoseconds() {\n  if (exports.mode === 'step') {\n    nsCount = (nsCount + 1) % 1e6;\n    return nsCount;\n  }\n  return Math.floor(Math.random() * 1e6);\n}\n\n/**\n * The hrtime function for browser\n *\n * @returns {Array} [Sceonds, NanoSeconds]\n */\nfunction browserHrtime() {\n  const current = Math.floor(window.performance.now() * 1e6);\n  const currentSeconds = Math.floor(current / 1e9);\n  const currentNanoseconds = current % 1e9;\n  return [currentSeconds, currentNanoseconds];\n}\n\n/**\n * Get the hrtime\n *\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction getHrtime() {\n  /* eslint no-undef:0 */\n  if (window && window.performance && window.performance.now) {\n    return browserHrtime();\n  }\n  const current = Date.now();\n  const currentSeconds = Math.floor(current / 1000);\n  const currentNanoseconds = current % 1000 * 1e6 + nanoseconds();\n  return [currentSeconds, currentNanoseconds];\n}\n\n/**\n * Custom function of hrtime\n *\n * @param {Array} time The start time of hrtime\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction customHrtime(time) {\n  const arr = getHrtime();\n  const currentSeconds = arr[0];\n  const currentNanoseconds = arr[1];\n  if (!time) {\n    return [currentSeconds, currentNanoseconds];\n  }\n  let offsetSeconds = currentSeconds - time[0];\n  let offsetNanoseconds = currentNanoseconds - time[1];\n  if (offsetNanoseconds < 0) {\n    offsetNanoseconds += 1e9;\n    offsetSeconds -= 1;\n  }\n  return [offsetSeconds, offsetNanoseconds];\n}\nconst hrtime = process && process.hrtime || customHrtime;\nconst start = hrtime();\n\n/**\n * Get the current time with nanoseconds\n *\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction now() {\n  const arr = hrtime(start);\n  const value = arr[1] + startNanoseconds;\n  if (value >= oneSecond) {\n    return [startSeconds + arr[0] + 1, value % oneSecond];\n  }\n  return [startSeconds + arr[0], value];\n}\n\n/**\n * Pad ns with '0'\n *\n * @param {Integer} ns The nano seconds\n * @returns {String}\n */\nfunction padNS(ns) {\n  const str = `${ns}`;\n  const pad = '000000000'.substring(0, 9 - str.length);\n  return `${pad}${str}`;\n}\n\n/**\n * Get the nano seconds string\n *\n * @param {Array} arr [Seconds, NanoSeconds]\n * @returns {String}\n */\nfunction toString(arr) {\n  const ns = arr || now();\n  return `${ns[0]}${padNS(ns[1])}`;\n}\n\n/**\n * Get the nano seconds iso string\n *\n * @param {Array} arr [Seconds, NanoSeconds]\n * @returns {String}\n */\nfunction toISOString(arr) {\n  const ns = arr || now();\n  const str = new Date(ns[0] * 1000).toISOString();\n  const nsStr = `${padNS(ns[1])}`.replace(/0+$/, '');\n  return str.replace('000Z', `${nsStr}Z`);\n}\n\n/**\n * Get the nano form iso string\n *\n * @param {any} str\n */\nfunction fromISOString(str) {\n  const arr = str.split('.');\n  const date = new Date(`${arr[0]}.000Z`);\n  const value = arr[1].substring(0, arr[1].length - 1);\n  const ns = Number.parseInt(`${value}000000000`.substring(0, 9), 10);\n  return [date.getTime() / 1000, ns];\n}\n\n/**\n * Get the difference of the nano seconds\n *\n * @param {Array} ns [Seconds, NanoSeconds]\n * @param {Array} ns2 [Seconds, NanoSeconds], default is `now()`\n * @returns {Integer} The difference nano seconds\n */\nfunction difference(ns, ns2) {\n  const current = ns2 || now();\n  const us = current[1] - ns[1];\n  const s = current[0] - ns[0];\n  return s * oneSecond + us;\n}\nexports.now = now;\nexports.toString = toString;\nexports.difference = difference;\nexports.toISOString = toISOString;\nexports.fromISOString = fromISOString;\nexports.mode = 'random';","map":{"version":3,"names":["currentMs","Date","now","startSeconds","Math","floor","startNanoseconds","oneSecond","nsCount","nanoseconds","exports","mode","random","browserHrtime","current","window","performance","currentSeconds","currentNanoseconds","getHrtime","customHrtime","time","arr","offsetSeconds","offsetNanoseconds","hrtime","process","start","value","padNS","ns","str","pad","substring","length","toString","toISOString","nsStr","replace","fromISOString","split","date","Number","parseInt","getTime","difference","ns2","us","s"],"sources":["D:/WebPhotoApp/sandbox/node_modules/nano-seconds/index.js"],"sourcesContent":["'use strict';\n\nconst currentMs = Date.now();\nconst startSeconds = Math.floor(currentMs / 1000);\nconst startNanoseconds = (currentMs % 1000) * 1000 * 1000;\nconst oneSecond = 1000 * 1000 * 1000;\nlet nsCount = 0;\n\n/**\n * Get nano seconds\n *\n * @returns {Integer} The value of nano seconds\n */\nfunction nanoseconds() {\n  if (exports.mode === 'step') {\n    nsCount = (nsCount + 1) % 1e6;\n    return nsCount;\n  }\n  return Math.floor(Math.random() * 1e6);\n}\n\n/**\n * The hrtime function for browser\n *\n * @returns {Array} [Sceonds, NanoSeconds]\n */\nfunction browserHrtime() {\n  const current = Math.floor(window.performance.now() * 1e6);\n  const currentSeconds = Math.floor(current / 1e9);\n  const currentNanoseconds = current % 1e9;\n  return [\n    currentSeconds,\n    currentNanoseconds,\n  ];\n}\n\n\n/**\n * Get the hrtime\n *\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction getHrtime() {\n  /* eslint no-undef:0 */\n  if (window && window.performance && window.performance.now) {\n    return browserHrtime();\n  }\n  const current = Date.now();\n  const currentSeconds = Math.floor(current / 1000);\n  const currentNanoseconds = ((current % 1000) * 1e6) + nanoseconds();\n  return [\n    currentSeconds,\n    currentNanoseconds,\n  ];\n}\n\n\n/**\n * Custom function of hrtime\n *\n * @param {Array} time The start time of hrtime\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction customHrtime(time) {\n  const arr = getHrtime();\n  const currentSeconds = arr[0];\n  const currentNanoseconds = arr[1];\n  if (!time) {\n    return [\n      currentSeconds,\n      currentNanoseconds,\n    ];\n  }\n  let offsetSeconds = currentSeconds - time[0];\n  let offsetNanoseconds = currentNanoseconds - time[1];\n  if (offsetNanoseconds < 0) {\n    offsetNanoseconds += 1e9;\n    offsetSeconds -= 1;\n  }\n  return [\n    offsetSeconds,\n    offsetNanoseconds,\n  ];\n}\n\nconst hrtime = (process && process.hrtime) || customHrtime;\nconst start = hrtime();\n\n\n/**\n * Get the current time with nanoseconds\n *\n * @returns {Array} [Seconds, NanoSeconds]\n */\nfunction now() {\n  const arr = hrtime(start);\n  const value = arr[1] + startNanoseconds;\n  if (value >= oneSecond) {\n    return [\n      startSeconds + arr[0] + 1,\n      value % oneSecond,\n    ];\n  }\n  return [\n    startSeconds + arr[0],\n    value,\n  ];\n}\n\n\n/**\n * Pad ns with '0'\n *\n * @param {Integer} ns The nano seconds\n * @returns {String}\n */\nfunction padNS(ns) {\n  const str = `${ns}`;\n  const pad = '000000000'.substring(0, 9 - str.length);\n  return `${pad}${str}`;\n}\n\n/**\n * Get the nano seconds string\n *\n * @param {Array} arr [Seconds, NanoSeconds]\n * @returns {String}\n */\nfunction toString(arr) {\n  const ns = arr || now();\n  return `${ns[0]}${padNS(ns[1])}`;\n}\n\n/**\n * Get the nano seconds iso string\n *\n * @param {Array} arr [Seconds, NanoSeconds]\n * @returns {String}\n */\nfunction toISOString(arr) {\n  const ns = arr || now();\n  const str = new Date(ns[0] * 1000).toISOString();\n  const nsStr = `${padNS(ns[1])}`.replace(/0+$/, '');\n  return str.replace('000Z', `${nsStr}Z`);\n}\n\n/**\n * Get the nano form iso string\n *\n * @param {any} str\n */\nfunction fromISOString(str) {\n  const arr = str.split('.');\n  const date = new Date(`${arr[0]}.000Z`);\n  const value = arr[1].substring(0, arr[1].length - 1);\n  const ns = Number.parseInt(`${value}000000000`.substring(0, 9), 10);\n  return [\n    date.getTime() / 1000,\n    ns,\n  ];\n}\n\n/**\n * Get the difference of the nano seconds\n *\n * @param {Array} ns [Seconds, NanoSeconds]\n * @param {Array} ns2 [Seconds, NanoSeconds], default is `now()`\n * @returns {Integer} The difference nano seconds\n */\nfunction difference(ns, ns2) {\n  const current = ns2 || now();\n  const us = current[1] - ns[1];\n  const s = current[0] - ns[0];\n  return (s * oneSecond) + us;\n}\n\nexports.now = now;\nexports.toString = toString;\nexports.difference = difference;\nexports.toISOString = toISOString;\nexports.fromISOString = fromISOString;\nexports.mode = 'random';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}